/* === INTROPROG ABGABE ===
 * Blatt 7, Aufgabe 2
 * Tutorium: t28
 * Gruppe: g10
 * Gruppenmitglieder:
 *  - Gruppenmitglieder
 *  - Pecheux Pierre-Louis
 * ========================
 */

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "introprog_input_merge_sort.h"

/*
  Diese Funktion fügt zwei bereits sortierte Arrays zu einem sortierten
  Array zusammen

    array : Pointer auf das Array
    first : Index des ersten Elemements (Beginn) des (Teil-)Array
    middle: Index des mittleren Elements des (Teil-)Array
    last  : Index des Letzten Elements (Ende) des (Teil-)Array
*/


void merge(int* array, int first, int middle, int last)
{
  int *hArray= malloc((last+1)*sizeof(int*));
  int hfirst=first;
  int hmiddle=middle+1;
  int i=0;


  while(hfirst<=middle&&hmiddle<=last){
    if(array[hfirst]<=array[hmiddle]){
      hArray[i]=array[hfirst];
      ++hfirst;
    }
    else{
      hArray[i]=array[hmiddle];
      ++hmiddle;
    }
    ++i;
  }
  while(hfirst<=middle){
    hArray[i]=array[hfirst];
    ++hfirst;
    ++i;
  }
  while(hmiddle<=last){
    hArray[i]=array[hmiddle];
    ++hmiddle;
    ++i;
  }

  int j=0;

  while(j<i){
    array[first+j]=hArray[j];
    ++j;
  }

  free(hArray);

}


/*
  Diese Funktion implementiert den iterativen Mergesort Algorithmus
  auf einem Array. Sie soll analog zum Pseudocode
  in Listing 4 implementiert werden.

    array:  Pointer auf das Array
    first:  Index des ersten Elements
    last :  Index des letzten Elements
*/

void merge_sort(int* array, int first, int last)
{
  int step=1;
  while (step<=last){
    int left=1;
    while(left<=last-step){
      int middle=left+step-1;
      if(middle>last){
        middle=last;
      }
      int right=left+2*step-1;
      if(right>last){
        right=last;
      }
      merge(array,left,middle,right);
      left=left+2*step;
    }
    step=step*2;
  }
}

/*
Hauptprogramm.

Liest Integerwerte aus einer Datei und gibt
diese sortiert im selben Format über die Standardausgabe wieder aus.

Aufruf: ./introprog_merge_sort_rekursiv <maximale anzahl>  <dateipfad>
*/
int main (int argc, char *argv[])
{
    if (argc!=3){
        printf ("usage: %s <maximale anzahl>  <dateipfad>\n", argv[0]);
        exit(2);
    }

    char *filename = argv[2];

    int *array = malloc(atoi(argv[1])*sizeof(int*));

    // Hier array initialisieren
    for(int i=0;i<atoi(argv[1]);++i){
      array[i]=0;
    }

    int len = read_array_from_file(array, atoi(argv[1]), filename);

    printf("Eingabe:\n");
    print_array(array, len);

      merge_sort(array,0,len-1);

    printf("Sortiert:\n");
    print_array(array, len);
    free(array);

    return 0;
}
