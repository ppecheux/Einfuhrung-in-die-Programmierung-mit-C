/* === INTROPROG ABGABE ===
 * Blatt 6, Aufgabe 2
 * Tutorium: t28
 * Gruppe: g10
 * Gruppenmitglieder:
 *  - pecheux pierrelouis
 *  - arvid maciy
 * ========================
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>   //definiert den speziellen Wert NaN für floats
#include "introprog_input_stacks-rpn.h"

typedef struct _stack stack;
typedef struct _stack_element stack_element;

struct _stack {
    stack_element* top;
};

struct _stack_element {
    stack_element* next;
    float value;
};

/* Füge Element am Anfang des Stacks ein
 *
 * astack    - Ein Pointer auf den Stack.
 * value     - Zahl die als neues Element auf den Stack gelegt werden soll.
 */


// void stack_push(stack* astack, float value)
// {
//     stack_element* new_elem;
//     new_elem->next=astack->top;
//     new_elem->value=value;
//     astack->top=new_elem;
// }
void stack_push(stack* astack, float value)
{
    stack_element* new_elem= (stack_element*)malloc(sizeof(stack_element));

    new_elem->next=astack->top;

    new_elem->value=value;

    astack->top=new_elem;
}


/* Nehme das letzte eingefügte Element vom Anfang des Stack
 * Gebe NaN zurück, wenn keine Element vorhanden ist.
 *
 * astack    - Ein Pointer auf den Stack
 *
 * Gebe die im Element enthaltenen Zahl zurück
 */


float stack_pop(stack* astack)
{
    if(astack!=NULL){//test wenn astack nicht leer ist
      float poped= astack->top->value;
      stack_element* loch= (stack_element*)malloc(sizeof(stack_element));
      loch=astack->top;
      astack->top=astack->top->next;
      free(loch);
      return poped;
    }
    return NAN;
}

/*
 * Führt abhängig von dem astack eine entsprechende Operation auf dem Stacks aus.
 * Wenn es sich bei dem astack um
 *  -> eine Zahl handelt, dann case die Zahl mithilfe von atof zu einem float
 *     und lege sie auf den Stack.
 *  -> einen Operator handelt, dann nehme zwei Zahlen vom Stack, führe die
 *     Operation aus und lege das Resultat auf den Stack.
 *  -> eine nichterkennbare Zeichenkette handelt, dann tue nichts.
 *
 * astack    - Ein Pointer auf den Stack
 * astack     - Eine Zeichenkette
 */
void process(stack* astack, char* token)
{
    /* HIER implementieren */
    //token is unsere stack inital

    if (is_number(token)){
      stack_push(astack,atof(token));// lege sie auf den Stack.
    }

    if(is_add(token)){
      //the top will pop so it should make the next the new top one
      if(astack->top!=NULL){
        if(astack->top->next!=NULL){
          stack_push(astack,(float)(stack_pop(astack)+stack_pop(astack)));
        }
        //else stack_push(astack,(float)(stack_pop(astack)));
      }
    }

    if(is_sub(token)){
      //the top will pop so it should make the next the new top one
      if(astack->top!=NULL){
        if(astack->top->next!=NULL){
          stack_push(astack,(float)((-1)*(stack_pop(astack)-stack_pop(astack))));
        }
        //else stack_push(astack,(float)(stack_pop(astack)));
      }
    }

    if(is_mult(token)){
      //the top will pop so it should make the next the new top one
      if(astack->top!=NULL){
        if(astack->top->next!=NULL){
          stack_push(astack,(float)((stack_pop(astack)*stack_pop(astack))));
        }
        //else stack_push(astack,(float)(stack_pop(astack)));
      }
    }
    // if(is_sub(token)){
    //   //the top will pot so it should make the next the new top one
    //       stack_push(stack_pop(astack->top->value)-stack_pop(astack->top->value));
    // }
    // if(is_mult(token)){
    //   //the top will pot so it should make the next the new top one
    //       stack_push(stack_pop(astack->top->value)*stack_pop(astack->top->value));
    // }


    // if(is_number(astack->top->value)){
    //   astack->top->value= atof(astack->top->value);//case die Zahl
    //   stack_push(astack->top);// lege sie auf den Stack.
    // }


    // if(is_add(astack->top->value)){
    //   if (is_number(astack->top->next->value)){
    //     if(is_number(astack->top->next->next->value)){
    //       stack_push(stack_pop(astack->top->next->value)+stack_pop(astack->top->next->next->value));
    //     }
    //     else stack_push(stack_pop(astack->top->next->value);
    //   }
    // }




    printf("\n<Logik fehlt!>\n");
    return;
    /* Du kannst zur Erkennung der astack folgende Hilfsfunktionen benutzen:
     *
     * Funktion         | Rückgabewert von 1 bedeutet
     * -----------------|----------------------------
     * is_add(astack)    | astack ist ein Pluszeichen
     * is_sub(astack)    | astack ist ein Minuszeichen
     * is_mult(astack)   | astack ist ein
     *                  |  Multiplikationszeichen
     * is_number(astack) | astack ist eine Zahl
     */
}

/* Debugausgabe des Stack
 * Diese Funktion kannst du zum debugging des Stack verwenden.
 *
 * astack    - Ein Pointer auf den Stack
 */
void print_stack(stack *astack) {
    int counter = 0;
    printf("\n |xxxxx|xxxxxxxxxxxxxxxxxxx|xxxxxxxxxxxxxxxxxxx|xxxxxxxxx|\n");
    printf(" | Nr. | Adresse           | Next              | Wert    |\n");
    printf(" |-----|-------------------|-------------------|---------|\n");
    for (stack_element* elem=astack->top; elem != NULL; elem = elem->next) {
        printf(" | %3d | %17p | %17p | %7.3f |\n", counter, elem, elem->next, elem->value);
        counter++;
    }
    printf(" |xxxxx|xxxxxxxxxxxxxxxxxxx|xxxxxxxxxxxxxxxxxxx|xxxxxxxxx|\n");
}

/* Kreiere einen Stack mit dynamischen Speicher.
 * Initialisiere die enthaltenen Variablen.
 *
 * Gebe einen Pointer auf den Stack zurück.
 */
 stack* stack_erstellen() {
     /* HIER implementieren */
     stack *new_stack = malloc(sizeof(stack));
     new_stack->top=NULL;
     //new_stack->top=NULL;
     return new_stack;

 }

 int main(int argc, char** args)
 {
     stack* astack = stack_erstellen();
     char zeile[MAX_STR];
     char* token;

     intro();
     while (taschenrechner_input(zeile) == 0) {
         // Erstes Token einlesen
         token = strtok(zeile, " ");

         while (token != NULL) {
             printf("Token: %s\n", token);
             // Stackoperationen durchführen
             process(astack, token);
             // Nächstes Token einlesen
             token = strtok(NULL, " ");
             print_stack(astack);
         }

         printf("\nExtrahiere Resultat\n");
         float result = stack_pop(astack);
         print_stack(astack);

         if (astack->top != NULL) {
             while (astack->top != NULL) {
                 stack_pop(astack);   //Räume Stack auf
             }
             printf("\nDoes not Compute: Stack nicht leer!\n");
         } else if (result != result) {
             printf("\nDoes not Compute: Berechnung fehlgeschlagen!\n");
         } else {
             printf("\nDein Ergebnis:\t%7.3f\n\n", result);
         }
     }
     free(astack);
 }
